//
//  HomeMapViewModel.swift
//  FoodFinder
//
//  Created by Martin Lukacs on 13/04/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates
//

import Combine
import CoreLocation
import Foundation
import MapKit
import Resolver
import SwiftUICombineToolBox

enum HomeMapPageState: Equatable {
    case loading
    case localized
}

final class HomeMapViewModel: ObservableObject {
    @Published var currentRegion: MKCoordinateRegion!
    @Published private(set) var state = HomeMapPageState.loading
    @Published var displayAlert = false

    @Injected private var locationRepository: LocationsRepositoryContract
    private var cancelBag = CancelBag()
    private var currentLocation: CLLocationCoordinate2D?

    init() {
        setUp()
    }

    func resetFocus() {
        guard let currentLocation = currentLocation else {
            return
        }
        currentRegion = createRegion(with: currentLocation)
    }
}

extension HomeMapViewModel {
    private func setUp() {
        locationRepository.currentLocation
            .receive(on: DispatchQueue.main)
            .sink(receiveValue: { [weak self] location in
                guard let self = self,
                      let location = location else {
                    return
                }
                self.currentLocation = location
                self.currentRegion = self.createRegion(with: location)
                self.state = .localized
            })
            .store(in: &cancelBag)

        locationRepository.permissionDenied
            .receive(on: DispatchQueue.main)
            .assignNoRetain(to: \.displayAlert, on: self)
            .store(in: &cancelBag)
    }

    private func createRegion(with location: CLLocationCoordinate2D) -> MKCoordinateRegion {
        .init(center: location,
              latitudinalMeters: GeneralConfiguration.mapLatLongDistance,
              longitudinalMeters: GeneralConfiguration.mapLatLongDistance)
    }
}
