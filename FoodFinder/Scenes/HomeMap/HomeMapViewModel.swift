//
//  HomeMapViewModel.swift
//  FoodFinder
//
//  Created by Martin Lukacs on 13/04/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates
//

import Combine
import CoreLocation
import Foundation
import MapKit
import Resolver
import SwiftUICombineToolBox

enum HomeMapPageState: Equatable {
    case loading
    case localized
}

final class HomeMapViewModel: ObservableObject {
    @Published var currentRegion: MKCoordinateRegion!
    @Published private(set) var state = HomeMapPageState.loading
    @Published var displayAlert = false
    @Published var mapVenueAnnotations: [MapVenueAnnotable] = []
    @Published var selectedVenue: MapVenueAnnotable?

    @Injected private var locationRepository: LocationsRepositoryContract
    @Injected private var venueRepository: VenueRepositoryContract

    private var cancelBag = CancelBag()
    private var currentLocation: CLLocationCoordinate2D?

    init() {
        setUp()
    }

    func resetFocus() {
        guard let currentLocation = currentLocation else {
            return
        }
        currentRegion = createRegion(with: currentLocation)
    }

    func setSelectedVenue(for venue: MapVenueAnnotable) {
        selectedVenue = venue
    }

    func cleanSelection() {
        selectedVenue = nil
    }
}

extension HomeMapViewModel {
    private func setUp() {
        locationRepository.currentLocation
            .compactMap { $0 }
            .flatMap { [weak self] location -> AnyPublisher<[BasicVenue], Never> in
                guard let self = self else {
                    return Just([]).eraseToAnyPublisher()
                }
                self.currentLocation = location
                self.currentRegion = self.createRegion(with: location)
                self.state = .localized
                return self.venueRepository.getRecommended(ofType: BasicVenue.self, for: location, with: APIConfig.baseRadius)
            }
            .receive(on: DispatchQueue.main)
            .sink(receiveValue: { [weak self] venues in
                self?.mapVenueAnnotations = venues.map { VenueFactory.createMapVenueAnnotable(from: $0) }
            })
            .store(in: &cancelBag)

        locationRepository.permissionDenied
            .receive(on: DispatchQueue.main)
            .assignNoRetain(to: \.displayAlert, on: self)
            .store(in: &cancelBag)

        mapPanning
            .compactMap { $0 }
            .flatMap { [weak self] region -> AnyPublisher<[BasicVenue], Never> in
                guard let self = self else {
                    return Just([]).eraseToAnyPublisher()
                }
                return self.venueRepository.getRecommended(ofType: BasicVenue.self,
                                                           for: region.center,
                                                           with: Int(region.distanceMax()))
            }
            .receive(on: DispatchQueue.main)
            .sink(receiveValue: { [weak self] venues in
                self?.updateMapVenueAnnotations(with: venues)
            })
            .store(in: &cancelBag)
    }

    private var mapPanning: AnyPublisher<MKCoordinateRegion?, Never> {
        $currentRegion
            .debounce(for: 0.4, scheduler: RunLoop.main)
            .eraseToAnyPublisher()
    }

    private func createRegion(with location: CLLocationCoordinate2D) -> MKCoordinateRegion {
        .init(center: location,
              latitudinalMeters: GeneralConfiguration.mapLatLongDistance,
              longitudinalMeters: GeneralConfiguration.mapLatLongDistance)
    }

    private func updateMapVenueAnnotations(with venues: [BasicVenueContract]) {
        let newRestaurants = venues.map { VenueFactory.createMapVenueAnnotable(from: $0) }
        var intermediate = mapVenueAnnotations
        intermediate.append(contentsOf: newRestaurants)
        mapVenueAnnotations = Array(Set(intermediate))
    }
}
